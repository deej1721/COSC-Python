//STEG CONVERSIONS
BINARY->DECIMAL->ASCII, WE WILL DO THIS IN REVERSE
NukeCodes = 'a' (THIS RETURNS 97)
//ASCII->DECIMAL
ord(NukeCodes)
ord() FUNCTION RETURNS DECIMAL EQUIVALENT OF ANY BINARY NUMBER
ord(NukeCodes) RETURNS 97, WORKING ASCII->DECIMAL->BINARY
//DECIMAL->BINARY
format(ord(NukeCodes)) (THIS RETURNS 0110001)
//BINARY->DECIMAL
int('01100001', 2) (ARUMENTS ARE NUMBER, THEN BASE OF NUMBER SYSTEM - BINARY IS A BASE TWO NUMBER SYSTEM)
//DECIMAL->ASCII
chr(97) (RETURNS 'a')

//GENERAL NOTES
chr(42) RETURNS '*', AN ASTERISK, OR WILDCARD VALUE


//STEG EXERCISE NOTES
def steg_encode_char(char, cover):
  msgBin = format(ord(char, '0>8b')
  for i in range(0,8):
    coverBinL = list(format(int(cover[i]), '0>8b'))
    coverBinL[-1] = msgBin[i]
    //ASSIGNS FIRST ELEMENT OF msgBin TO LAST ELEMENT OF coverBinL
    cover[i] = str(int''.join(coverBinL),2))

def steg_decode_char(stego)
  msgBits = []
  for b in stego:
    msgBits.append(bin(int(b))[-1])
    return chr(int''.join(msgBits),2))

// READING AND WRITING TO FILES WITH PYTHON

with open('myfile.txt','r') as fp:
  pass
//OPENS FILE AND CREATES fp OBJECT THAT EXISTS AS A "FILE POINTER"
  print(fp.read())
  //FILE BECOMES GIANT STRING
  print(fp.readlines())
  //FILE BECOMES A LIST OF LINES

with open('myfile.txt','w') as fp:
  fp.write("Writing hurts my hands\n")
  //ACCEPTS STRINGS
  fp.writelines(['each line \n', 'as an elemenet\n'])

with open('myfile.txt','r') as fp0:
  with open('newfile.txt', 'w') as fp1:
    fp1.write(fp0.read())

//SETS

//DICTIONARIES
//Have key-value pairs and a specific order
//Order works like so: 'IndexPosition':'ValueAssociated', so you can only reference by IndexPosition
myDict = {'E-1':'Pvt', 'E-2':'PFC', 'E-3':'LCpl', 'E-4':'Cpl'}
myDict['E-1']
myDict['E-5'] = 'Sgt'
//THIS ADDS AN ELEMENT TO A LIST
for i in myDict:
  print(i)
//RETURNS THE KEYS, NOT THE VALUES
for i in myDict:
  print(myDict[i])
//RETURNS THE VALUES, NOT THE KEYS
myStr = "Calling barry benson bee to the stand"
myDict = {}
//REINSTANTIATING THE DICTIONARY CLEARS IT OF ALL VALUES
for i in myStr:
  if i in myDict:
    myDict[i] += 1
  else:
    myDict[i] = 1
//THIS COUNTS OCCURENCES OF ALL CHARACTERS
myDict['a']
//THIS RETURNS THE TOTAL OCCURENCES OF THE SPECIFIED CHARACTER!

//VARIABLE LENGTH ARGUMENTS

def myFunct(*args):
  product = 1
  for i in args:
    product = product * i 
  return product
print(myFunction(5,10,50,100))
//RETURNS 250000, AS IT ITERATED THROUGH ALL PROVIDED ARGUMENTS

//GENERAL NOTES
- DO NOT DECLARE GLOBAL VARIABLES!!!

//LAMBDAS (NON-TESTABLE)
y = lambda x: x + 100
print(y(1)) 
//THIS WILL RETURN 101

def incrementor(n):
  return lambda x: x + n 
fun = incrementor(42)
print(fun(10))

myList = [2,3,4,5]
PRINT
print(list(map(lambda x:x**2, myList)))
//map() DOES FUNCTION ON LEFT TO ALL ITERABLES ON RIGHT
//THIS PRINTS 4,9,16,25
print(all(map(lambda x:x%2==0, myList)))
//THIS RETURNS FALSE AS NOT ALL ELEMENTS IN myLIST ARE DIVISIBLE BY 2
//all() FUNCTION ASSESSES true OR false OF ALL ON RIGHT
