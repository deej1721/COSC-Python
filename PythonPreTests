// PRACTICE TEST 1
 def q1(floatstr):
  4     '''
  5     TLO: 112-SCRPY002, LSA 3,4
  6     Given the floatstr, which is a comma separated string of
  7     floats, return a list with each of the floats in the 
  8     argument as elements in the list.
  9     '''
 10     res = [float(idx) for idx in floatstr.split(',')]
 11     return res
 12     pass

INSTRUCTOR SOLUTION:
  floats = []
  float_list = floatstr.split(',')
  for i in float_list:
    floats.append(float(i))
  return floats
OR
return list(map(float, floatstr.split(',')))
return [float(i) or i in floatstr.split(',')
------------------------------------------------------------------------------------------------------------------------
def q2(*args):
 15     '''
 16     TLO: 112-SCRPY006, LSA 3
 17     TLO: 112-SCRPY007, LSA 4
 18     Given the variable length argument list, return the average
 19     of all the arguments as a float
 20     '''
 21 
 22     return sum(args)/len(args)
 23     pass
INSTRUCTOR SOLUTION:
  mySum = 0
    for i in args:
    mySum += i
  myAvg = mySum/len(args)
  return myAvg
------------------------------------------------------------------------------------------------------------------------
 def q3(lst,n):
 26     '''
 27     TLO: 112-SCRPY004, LSA 3
 28     Given a list (lst) and a number of items (n), return a new 
 29     list containing the last n entries in lst.
 30     '''
 31     return lst[-n:]
 32     pass
INSTRUCTOR SOLUTION:
REFER TO ABOVE!
------------------------------------------------------------------------------------------------------------------------
def q4(strng):
 35     '''
 36     TLO: 112-SCRPY004, LSA 1,2
 37     TLO: 112-SCRPY006, LSA 3
 38     Given an input string, return a list containing the ordinal numbers of 
 39     each character in the string in the order found in the input string.
 40     '''
 41     listOrd = []
 42     for character in strng:
 43         listOrd.append(ord(character))
 44     return listOrd
 45     pass
 46 
INSTRUCTOR SOLUTION:
  return list(map(ord, strng))
//MAP FUNCTION DOES ALL ON LEFT TO ALL ON RIGHT!!!
------------------------------------------------------------------------------------------------------------------------
 def q5(strng):
 48     '''
 49     TLO: 112-SCRPY002, LSA 1,3
 50     TLO: 112-SCRPY004, LSA 2
 51     Given an input string, return a tuple with each element in the tuple
 52     containing a single word from the input string in order.
 53     '''
 54     return tuple(strng.split(" "))
 55     pass
 56 
INSTRUCTOR SOLUTION:
  return tuple(strng.split())
  //THE " " WAS EXTRA, NOT NEEDED!!!
------------------------------------------------------------------------------------------------------------------------
 57 def q6(catalog, order):
 58     '''
 59     TLO: 112-SCRPY007, LSA 2
 60     Given a dictionary (catalog) whose keys are product names and values are product
 61     prices per unit and a list of tuples (order) of product names and quantities,
 62     compute and return the total value of the order.
 63 
 64     Example catalog:
 65     {i
 66         'AMD Ryzen 5 5600X': 289.99,
 67         'Intel Core i9-9900K': 363.50,
 68         'AMD Ryzen 9 5900X': 569.99
 69     }
 70 
 71     Example order:
 72     [
 73         ('AMD Ryzen 5 5600X', 5), 
 74         ('Intel Core i9-9900K', 3)
 75     ]
 76 
 77     Example result:
 78     2540.45 
 79 
 80     How the above result was computed:
 81     (289.99 * 5) + (363.50 * 3)
 82     '''
 83     pass
UNSOLVED! 
INSTRUCTOR SOLUTION:
  total = 0
  for product, quantity in order:
    total += (catalog[product] * quantity)
  return total
//YOU CAN REFERENCE SUB-ITERABLE ELEMENTS WITHIN AN ITERABLE OBJECT!!! BIG TAKEAWAY!!!
//FIRST LOOP EXECUTION, product = 'AMD Ryzen 5 5600X', quantity = 5, THEN 'Intel Core i9-9900K' AND 3 AND SO ON!!!
  
------------------------------------------------------------------------------------------------------------------------
 def q7(filename):
 86     '''
 87     TLO: 112-SCRPY005, LSA 1
 88     Given a filename, open the file and return the length of the first line 
 89     in the file excluding the line terminator.
 90     '''
 91     with open(filename, 'r') as fp0:
 92         t = fp0.read()
 93         l = t.splitlines()
 94         return len(l[0])
 95     pass
 96 
INSTRUCTOR SOLUTION:
  with open(filename, 'r') as fp:
    return len(fp.readlines()[0]) -1
------------------------------------------------------------------------------------------------------------------------
def q8(filename,lst):
 98     '''
 99     TLO: 112-SCRPY003, LSA 1
100     TLO: 112-SCRPY004, LSA 1,2
101     TLO: 112-SCRPY005, LSA 1
102     Given a filename and a list, write each entry from the list to the file
103     on separate lines until a case-insensitive entry of "stop" is found in 
104     the list. If "stop" is not found in the list, write the entire list to 
105     the file on separate lines.
106     '''
107     counter = 0
108     with open(filename, 'w') as fp1:
109       for item in lst:
110           while lst.index(int(counter)) != 'stop':
111               fp1.writelines(lst.index(int(counter)))
112               counter = counter + 1
113     pass
UNSOLVED!
INSTRUCTOR S0LUTION:
  with open(filename, 'w') as fp:
    for i in lst:
      if i.lower() == 'stop':
        break
      else:
        fp.write(i + '\n')
// DO NOT FORGET THE NEWLINE CHARACTER, \n, TO ADD EACH ON SEPARATE LINES
------------------------------------------------------------------------------------------------------------------------
def q9(miltime):
116     '''
117     TLO: 112-SCRPY003, LSA 1
118     Given the military time in the argument miltime, return a string 
119     containing the greeting of the day.
120     0300-1159 "Good Morning"
121     1200-1559 "Good Afternoon"
122     1600-2059 "Good Evening"
123     2100-0259 "Good Night"
124     '''
125     if int(miltime) > 259 and int(miltime) < 1159:
126         return "Good Morning"
127     elif int(miltime) >= 1200 and int(miltime) < 1559:
128         return "Good Afternoon"
129     elif int(miltime) >= 1600 and int(miltime) < 2059:
130         return "Good Evening"
131     else:
132         return "Good Night"
133     pass
------------------------------------------------------------------------------------------------------------------------
 def q10(numlist):
136     '''
137     TLO: 112-SCRPY003, LSA 1
138     TLO: 112-SCRPY004, LSA 1
139     Given the argument numlist as a list of numbers, return True if all 
140     numbers in the list are NOT negative. If any numbers in the list are
141     negative, return False.
142     '''
143     count = 0
144     for val in numlist:
145         if val > 0:
146             count += 1
147     return count == len(numlist)
148     pass
INSTRUCTOR SOLUTION:
  for i in numlist:
    if i < 0:
      return False
  return True
OR
  return all(map(lambda x: x > 0, numlist))
//all() LOOKS AT AN ITERABLE OBJECT AND DETERMINES TRUE OR FALSE FOR EVERY ELEMENT IN THE OBJECT
------------------------------------------------------------------------------------------------------------------------
















