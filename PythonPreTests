// PRACTICE TEST 1
 def q1(floatstr):
  4     '''
  5     TLO: 112-SCRPY002, LSA 3,4
  6     Given the floatstr, which is a comma separated string of
  7     floats, return a list with each of the floats in the 
  8     argument as elements in the list.
  9     '''
 10     res = [float(idx) for idx in floatstr.split(',')]
 11     return res
 12     pass

INSTRUCTOR SOLUTION:
  floats = []
  float_list = floatstr.split(',')
  for i in float_list:
    floats.append(float(i))
  return floats
OR
return list(map(float, floatstr.split(',')))
return [float(i) or i in floatstr.split(',')
------------------------------------------------------------------------------------------------------------------------
def q2(*args):
 15     '''
 16     TLO: 112-SCRPY006, LSA 3
 17     TLO: 112-SCRPY007, LSA 4
 18     Given the variable length argument list, return the average
 19     of all the arguments as a float
 20     '''
 21 
 22     return sum(args)/len(args)
 23     pass
INSTRUCTOR SOLUTION:
  mySum = 0
    for i in args:
    mySum += i
  myAvg = mySum/len(args)
  return myAvg
------------------------------------------------------------------------------------------------------------------------
 def q3(lst,n):
 26     '''
 27     TLO: 112-SCRPY004, LSA 3
 28     Given a list (lst) and a number of items (n), return a new 
 29     list containing the last n entries in lst.
 30     '''
 31     return lst[-n:]
 32     pass
INSTRUCTOR SOLUTION:
REFER TO ABOVE!
------------------------------------------------------------------------------------------------------------------------
def q4(strng):
 35     '''
 36     TLO: 112-SCRPY004, LSA 1,2
 37     TLO: 112-SCRPY006, LSA 3
 38     Given an input string, return a list containing the ordinal numbers of 
 39     each character in the string in the order found in the input string.
 40     '''
 41     listOrd = []
 42     for character in strng:
 43         listOrd.append(ord(character))
 44     return listOrd
 45     pass
 46 
INSTRUCTOR SOLUTION:
  return list(map(ord, strng))
//MAP FUNCTION DOES ALL ON LEFT TO ALL ON RIGHT!!!
------------------------------------------------------------------------------------------------------------------------
 def q5(strng):
 48     '''
 49     TLO: 112-SCRPY002, LSA 1,3
 50     TLO: 112-SCRPY004, LSA 2
 51     Given an input string, return a tuple with each element in the tuple
 52     containing a single word from the input string in order.
 53     '''
 54     return tuple(strng.split(" "))
 55     pass
 56 
INSTRUCTOR SOLUTION:
  return tuple(strng.split())
  //THE " " WAS EXTRA, NOT NEEDED!!!
------------------------------------------------------------------------------------------------------------------------
 57 def q6(catalog, order):
 58     '''
 59     TLO: 112-SCRPY007, LSA 2
 60     Given a dictionary (catalog) whose keys are product names and values are product
 61     prices per unit and a list of tuples (order) of product names and quantities,
 62     compute and return the total value of the order.
 63 
 64     Example catalog:
 65     {i
 66         'AMD Ryzen 5 5600X': 289.99,
 67         'Intel Core i9-9900K': 363.50,
 68         'AMD Ryzen 9 5900X': 569.99
 69     }
 70 
 71     Example order:
 72     [
 73         ('AMD Ryzen 5 5600X', 5), 
 74         ('Intel Core i9-9900K', 3)
 75     ]
 76 
 77     Example result:
 78     2540.45 
 79 
 80     How the above result was computed:
 81     (289.99 * 5) + (363.50 * 3)
 82     '''
 83     pass
UNSOLVED! 
INSTRUCTOR SOLUTION:
  total = 0
  for product, quantity in order:
    total += (catalog[product] * quantity)
  return total
//YOU CAN REFERENCE SUB-ITERABLE ELEMENTS WITHIN AN ITERABLE OBJECT!!! BIG TAKEAWAY!!!
//FIRST LOOP EXECUTION, product = 'AMD Ryzen 5 5600X', quantity = 5, THEN 'Intel Core i9-9900K' AND 3 AND SO ON!!!
  
------------------------------------------------------------------------------------------------------------------------
 def q7(filename):
 86     '''
 87     TLO: 112-SCRPY005, LSA 1
 88     Given a filename, open the file and return the length of the first line 
 89     in the file excluding the line terminator.
 90     '''
 91     with open(filename, 'r') as fp0:
 92         t = fp0.read()
 93         l = t.splitlines()
 94         return len(l[0])
 95     pass
 96 
INSTRUCTOR SOLUTION:
  with open(filename, 'r') as fp:
    return len(fp.readlines()[0]) -1
------------------------------------------------------------------------------------------------------------------------
def q8(filename,lst):
 98     '''
 99     TLO: 112-SCRPY003, LSA 1
100     TLO: 112-SCRPY004, LSA 1,2
101     TLO: 112-SCRPY005, LSA 1
102     Given a filename and a list, write each entry from the list to the file
103     on separate lines until a case-insensitive entry of "stop" is found in 
104     the list. If "stop" is not found in the list, write the entire list to 
105     the file on separate lines.
106     '''
107     counter = 0
108     with open(filename, 'w') as fp1:
109       for item in lst:
110           while lst.index(int(counter)) != 'stop':
111               fp1.writelines(lst.index(int(counter)))
112               counter = counter + 1
113     pass
UNSOLVED!
INSTRUCTOR S0LUTION:
  with open(filename, 'w') as fp:
    for i in lst:
      if i.lower() == 'stop':
        break
      else:
        fp.write(i + '\n')
// DO NOT FORGET THE NEWLINE CHARACTER, \n, TO ADD EACH ON SEPARATE LINES
------------------------------------------------------------------------------------------------------------------------
def q9(miltime):
116     '''
117     TLO: 112-SCRPY003, LSA 1
118     Given the military time in the argument miltime, return a string 
119     containing the greeting of the day.
120     0300-1159 "Good Morning"
121     1200-1559 "Good Afternoon"
122     1600-2059 "Good Evening"
123     2100-0259 "Good Night"
124     '''
125     if int(miltime) > 259 and int(miltime) < 1159:
126         return "Good Morning"
127     elif int(miltime) >= 1200 and int(miltime) < 1559:
128         return "Good Afternoon"
129     elif int(miltime) >= 1600 and int(miltime) < 2059:
130         return "Good Evening"
131     else:
132         return "Good Night"
133     pass
------------------------------------------------------------------------------------------------------------------------
 def q10(numlist):
136     '''
137     TLO: 112-SCRPY003, LSA 1
138     TLO: 112-SCRPY004, LSA 1
139     Given the argument numlist as a list of numbers, return True if all 
140     numbers in the list are NOT negative. If any numbers in the list are
141     negative, return False.
142     '''
143     count = 0
144     for val in numlist:
145         if val > 0:
146             count += 1
147     return count == len(numlist)
148     pass
INSTRUCTOR SOLUTION:
  for i in numlist:
    if i < 0:
      return False
  return True
OR
  return all(map(lambda x: x > 0, numlist))
//all() LOOKS AT AN ITERABLE OBJECT AND DETERMINES TRUE OR FALSE FOR EVERY ELEMENT IN THE OBJECT
------------------------------------------------------------------------------------------------------------------------
1 #!/usr/bin/env python3
  2 
  3 def q1(sentence):
  4     '''
  5     Given a string of multiple words separated by single spaces,
  6     return a new string with the sentence reversed. The words
  7     themselves should remain as they are. For example, given
  8     'it is accepted as a masterpiece on strategy', the returned
  9     string should be 'strategy on masterpiece a as accepted is it'.
 10     '''
 11     s = sentence.split()[::-1]
 12     l = []
 13     for i in s:
 14         l.append(i)
 15     return " ".join(l)
 16     pass
 17 
 18 def q2(n):
 19     '''
 20     Given a positive integer, return its string representation with
 21     commas seperating groups of 3 digits. For example, given 65535
 22     the returned string should be '65,535'.
 23     '''
 24 
 25     return ('{:,}'.format(n))
 26     pass
 27 
 28 def q3(lst0, lst1):
 29     '''
 30     Given two lists of integers, return a sorted list that contains
 31     all integers from both lists in descending order. For example,
 32     given [3,4,9] and [8,1,5] the returned list should be [9,8,5,4,3,1].
 33     The returned list may contain duplicates.
 34     '''
 35     nlist = lst0 + lst1
 36     nlist.sort(reverse=True)
 37     return nlist
 38     pass
 39 
 40 def q4(s1,s2,s3):
 41     '''
 42     Given 3 scores in the range [0-100] inclusive, return 'GO' if
 43     the average score is greater than 50. Otherwise return 'NOGO'.
 44     '''
 45     if (s1 + s2 + s3)/3 > 50:
 46         return 'GO'
 47     else:
 48         return 'NOGO'
 49     pass
 50 
 51 def q5(integer, limit):
 52     '''
 53     Given an integer and limit, return a list of even multiples of the
 54     integer up to and including the limit. For example, if integer==3 and
55     limit==30, the returned list should be [0,6,12,18,24,30]. Note, 0 is
 56     a multiple of any integer except 0 itself.
 57     '''
 58     steve = list(range(0, limit, integer))
 59     for i in steve:
 60         if i% 2 != 0:
 61             steve.remove(i)
 62     return steve
 63     pass
 64 
 65 def q6(f0, f1):
 66     '''
 67     Given two filenames, return a list whose elements consist of line numbers
 68     for which the two files differ. The first line is considered line 0.
 69     '''
 70     import itertools
 71     lst = []
 72     with open(f0) as f0:
 73         with open(f1) as f1:
 74             for idx, (line1, line2) in enumerate(zip(f0, f1)):
 75                 if line1 != line2:
 76                     lst.append(idx)
 77     return lst
 78 
 79 
 80     pass
 81 def q7(lst):
 82     '''
 83     Return the first duplicate value in the given list.
 84     For example, if given [5,7,9,1,3,7,9,5], the returned value should
 85     be 7.
 86     '''
 87     st = set()
 88     for i in lst:
 89         if i in st:
 90             return i
91         st.add(i)
 92     pass
 93 
 94 def q8(strng):
 95     '''
 96     Given a sentence as a string with words being separated by a single space,
 97     return the length of the shortest word.
 98     '''
 99     return len(min(strng.split(), key=len))
100     pass
101 
102 def q9(strng):
103     '''
104     Given an alphanumeric string, return the character whose ascii value
105     is that of the integer represenation of all of the digits in the string
106     concatenated in the order in which they appear. For example, given
107     'hell9oworld7', the returned character should be 'a' which has
108     the ascii value of 97.
109     '''
110     strings = ""
111     numbers = []
112     for c in strng:
113         if c.isdigit():
114             numbers.append(c)
115     strings = strings.join(numbers)
116     return chr(int(strings))
117 
118     pass
119 
120 def q10(arr):
121     '''
122     Given a list of positive integers sorted in ascending order, return
123     the first non-consecutive value. If all values are consecutive, return
124     None. For example, given [1,2,3,4,6,7], the returned value should be 6. 
125     '''
126     i = 1
127     for x in arr:
128         if i < len (arr) and arr[i] - arr[i-1] != 1:
129             return arr[i]
130         i +=1
131     return None
132     pass
                                                                   















